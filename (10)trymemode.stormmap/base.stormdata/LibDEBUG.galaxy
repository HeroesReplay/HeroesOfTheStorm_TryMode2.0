include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib_h"
include "TriggerLibs/GameLib_h"
include "TriggerLibs/MapMechanicsLib_h"
include "TriggerLibs/AILib_h"
include "TriggerLibs/UILib_h"
include "TriggerLibs/StartingExperienceLib_h"
include "TriggerLibs/SoundLib_h"
include "TriggerLibs/GameDataHelperLib_h"
include "TriggerLibs/SupportLib_h"

include "libDEBUG_h"

//--------------------------------------------------------------------------------------------------
// Library: DEBUG
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libDEBUG_InitLibraries() {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libStEx_InitVariables();
    libSond_InitVariables();
    libGDHL_InitVariables();
}

// Variable Initialization
bool libDEBUG_InitVariables_completed = false;

void libDEBUG_InitVariables() {
    libCore_gv_dEBUGDebuggingEnabled = true;
    libDEBUG_gv_SpawnUnitScale = 1.0;
    libDEBUG_gv_FogOfWarIsEnabled = true;
    libDEBUG_gv_BuilderModeIsEnabled = false;
    libDEBUG_gv_OutputUnitIDModeIsEnabled = false;
    libDEBUG_gv_ToggleFreeCameraIsEnabled = false;
    libDEBUG_gv_GreetingsModeIsEnabled = false;

}

void MimicTriggerDebugOutput(int lp_uselessInt, text lp_outputText, bool lp_uselessBool) {
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, lp_outputText);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Greeting Command
//--------------------------------------------------------------------------------------------------
bool libDEBUG_gt_greetingCommand_Func(bool testConds, bool runActions) {
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringToText("Greetings, ") + PlayerName(EventPlayer()) + StringToText(". Welcome to Try Mode 2.0!")));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Your Player ID is " + IntToString(EventPlayer())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEBUG_gt_greetingCommand_Init() {
    libDEBUG_gt_greetingCommand = TriggerCreate("libDEBUG_gt_greetingCommand_Func");
    TriggerEnable(libDEBUG_gt_greetingCommand, true);
    TriggerAddEventChatMessage(libDEBUG_gt_greetingCommand, c_playerAny, "hello", true);
    TriggerAddEventChatMessage(libDEBUG_gt_greetingCommand, c_playerAny, "hi", true);

}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Spawn unit command
//--------------------------------------------------------------------------------------------------
bool libDEBUG_gt_SpawnUnitCommand_Func(bool testConds, bool runActions) {

    string lv_inputparam = StringWord(EventChatMessage(false), 2);
    string lv_inputparam2 = StringWord(EventChatMessage(false), 3);
    int lv_triggeringPlayer;
    lv_triggeringPlayer = EventPlayer();

    // Check the first param (command itself does it match, as "summary" can trigger "sum" command.) 
    if (!(((StringWord(EventChatMessage(false), 1) == "sum") || (StringWord(EventChatMessage(false), 1) == "summon")))) {
        return false;
    }

    if (lv_inputparam == null) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Command of summoning: summon | sum UnitName [Player]"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Examples: summon TownTownHallL2"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Examples: sum HeroRaynor"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Examples: summon JungleGraveGolemDefender 6"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("For more details, please refer to README file."));
        return true;
    }

    if (!(lv_inputparam2 == null)) {
        lv_triggeringPlayer = StringToInt(lv_inputparam2);
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Trying to spawn: " + lv_inputparam + ", for Player " + IntToString(lv_triggeringPlayer)));

    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_inputparam, 0, lv_triggeringPlayer, CameraGetTarget(EventPlayer()), null);
    UnitSetScale(UnitLastCreated(), 100.0 * libDEBUG_gv_SpawnUnitScale, 100.0 * libDEBUG_gv_SpawnUnitScale, 100.0 * libDEBUG_gv_SpawnUnitScale);
    // Enable group selection, like vikings and samuro with illusion master
    UISetDragSelectEnabled(PlayerGroupAll(), true);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, true);
    return true;
}

void libDEBUG_gt_SpawnUnitCommand_Init() {
    libDEBUG_gt_SpawnUnitCommand = TriggerCreate("libDEBUG_gt_SpawnUnitCommand_Func");
    TriggerEnable(libDEBUG_gt_SpawnUnitCommand, true);
    TriggerAddEventChatMessage(libDEBUG_gt_SpawnUnitCommand, c_playerAny, "summon", false);
    TriggerAddEventChatMessage(libDEBUG_gt_SpawnUnitCommand, c_playerAny, "sum", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Spawn Unit with scale command
//--------------------------------------------------------------------------------------------------

bool libDEBUG_gt_SpawnSetScaleCommand_Func(bool testConds, bool runActions) {

    string lv_inputparam = StringWord(EventChatMessage(false), 2);
    fixed lv_scale;

    // Check the first param (command itself does it match, as "summary" can trigger "sum" command.) 
    if (!(((StringWord(EventChatMessage(false), 1) == "ss") || (StringWord(EventChatMessage(false), 1) == "setscale")))) {
        return false;
    }

    if (lv_inputparam == null) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Command of setting summons scale: setscale | ss SCALE"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Examples: setscale 1"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Examples: ss 3"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("For more details, please refer to README file."));
        return true;
    }

    lv_scale = StringToFixed(lv_inputparam);

    if (lv_scale == 0) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Invalid scale number or scale is 0."));
        return true;
    }

    libDEBUG_gv_SpawnUnitScale = lv_scale;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Changed summon unit with scale " + FixedToString(libDEBUG_gv_SpawnUnitScale, 2)));
    return true;
}

void libDEBUG_gt_SpawnSetScaleCommand_Init() {
    libDEBUG_gt_SpawnSetScaleCommand = TriggerCreate("libDEBUG_gt_SpawnSetScaleCommand_Func");
    TriggerEnable(libDEBUG_gt_SpawnSetScaleCommand, true);
    TriggerAddEventChatMessage(libDEBUG_gt_SpawnSetScaleCommand, c_playerAny, "setscale", false);
    TriggerAddEventChatMessage(libDEBUG_gt_SpawnSetScaleCommand, c_playerAny, "ss", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Kill each units in a selected group
//--------------------------------------------------------------------------------------------------

bool libDEBUG_gt_KillUnitCommand_Func(bool testConds, bool runActions) {
    // Variable Declarations
    int lv_units;
    unit lv_unit;

    // Automatic Variable Declarations
    int autoC410B7EE_ae;
    const int autoC410B7EE_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC410B7EE_ae = UnitGroupCount(UnitGroupSelected(EventPlayer()), c_unitCountAlive);
    lv_units = 1;
    for (;
        ((autoC410B7EE_ai >= 0 && lv_units <= autoC410B7EE_ae) || (autoC410B7EE_ai < 0 && lv_units >= autoC410B7EE_ae)); lv_units += autoC410B7EE_ai) {
        lv_unit = UnitGroupUnit(UnitGroupSelected(EventPlayer()), lv_units);
        UnitKill(lv_unit);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Killed Player " + IntToString(UnitGetOwner(lv_unit)) + "'s " + UnitGetType(lv_unit)));
    }
    return true;
}

void libDEBUG_gt_KillUnitCommand_Init() {
    libDEBUG_gt_KillUnitCommand = TriggerCreate("libDEBUG_gt_KillUnitCommand_Func");
    TriggerEnable(libDEBUG_gt_KillUnitCommand, true);
    TriggerAddEventChatMessage(libDEBUG_gt_KillUnitCommand, c_playerAny, "killunits", true);
    TriggerAddEventChatMessage(libDEBUG_gt_KillUnitCommand, c_playerAny, "ku", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Restart game command
//--------------------------------------------------------------------------------------------------

bool libDEBUG_gt_RestartGameCommand_Func(bool testConds, bool runActions) {
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Attempting to restart......."));
    RestartGame(PlayerGroupAll());
    return true;
}

void libDEBUG_gt_RestartGameCommand_Init() {
    libDEBUG_gt_RestartGameCommand = TriggerCreate("libDEBUG_gt_RestartGameCommand_Func");
    TriggerEnable(libDEBUG_gt_RestartGameCommand, true);
    TriggerAddEventChatMessage(libDEBUG_gt_RestartGameCommand, c_playerAny, "restart", true);
    TriggerAddEventChatMessage(libDEBUG_gt_RestartGameCommand, c_playerAny, "re", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Respawn time override command
//--------------------------------------------------------------------------------------------------

bool libDEBUG_gt_RespawnTimeCommand_Func(bool testConds, bool runActions) {
    string lv_inputparam;
    lv_inputparam = StringWord(EventChatMessage(false), 2);

    // Check the first param (command itself does it match, as "summary" can trigger "sum" command.) 
    if (!(((StringWord(EventChatMessage(false), 1) == "rst") || (StringWord(EventChatMessage(false), 1) == "respawntime")))) {
        return false;
    }

    if (lv_inputparam == null) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Command for respawn time: respawntime | rst Time"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Example: respawntime 0"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Example: rst 10"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("For more details, please refer to README file."));
        return true;
    }

    if (StringToInt(lv_inputparam) == 0) {
        // libCore_gv_bALDeathTimeOverride cannot set to 0, so set it to 1 game tick (0.0625s)
        libCore_gv_bALDeathTimeOverride = 0.0625;
    } else {
        libCore_gv_bALDeathTimeOverride = StringToInt(lv_inputparam);
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Respawn timer set to " + IntToString(StringToInt(lv_inputparam)))); //LOL
    return true;
}
void libDEBUG_gt_RespawnTimeCommand_Init() {
    libDEBUG_gt_RespawnTimeCommand = TriggerCreate("libDEBUG_gt_RespawnTimeCommand_Func");
    TriggerEnable(libDEBUG_gt_RespawnTimeCommand, true);
    TriggerAddEventChatMessage(libDEBUG_gt_RespawnTimeCommand, c_playerAny, "respawntime", false);
    TriggerAddEventChatMessage(libDEBUG_gt_RespawnTimeCommand, c_playerAny, "rst", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Respawn Item to unit
//--------------------------------------------------------------------------------------------------

bool libDEBUG_gt_SpawnItemToUnitCommand_Func(bool testConds, bool runActions) {
    string lv_inputparam;
    unit lv_itUnit;
    unitgroup lv_unitgroup;
    int lv_unitcount;
    lv_inputparam = StringWord(EventChatMessage(false), 2);

    // Check the first param (command itself does it match, as "summary" can trigger "sum" command.) 
    if (!(((StringWord(EventChatMessage(false), 1) == "adi") || (StringWord(EventChatMessage(false), 1) == "additem")))) {
        return false;
    }

    if (lv_inputparam == null) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Command for spawn items: additem | adi ITEM"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Example: additem ArthasAntiMagicShell"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Example: adi TalentRewind"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("For more details, please refer to README file."));
        return true;
    }

    lv_unitgroup = UnitGroupSelected(EventPlayer());
    lv_unitcount = UnitGroupCount(lv_unitgroup, c_unitCountAll);
    for (;; lv_unitcount -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(lv_unitgroup, lv_unitcount);
        if (lv_itUnit == null) {
            break;
        }
        UnitInventoryCreate(lv_itUnit, lv_inputparam);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Tried to add " + lv_inputparam + " to " + UnitGetType(lv_itUnit)));
    }
    EngineReset();
    TriggerDebugSetTypeFile(1, "TriggerDebug.txt");
    TriggerDebugOutputEnable(true);
    TriggerDebugEnableType(1, true);
    TriggerDebugOutput(1, StringToText("Param/Value/C6C750AD"), true);
    return true;
}
void libDEBUG_gt_SpawnItemToUnitCommand_Init() {
    libDEBUG_gt_SpawnItemToUnitCommand = TriggerCreate("libDEBUG_gt_SpawnItemToUnitCommand_Func");
    TriggerEnable(libDEBUG_gt_SpawnItemToUnitCommand, true);
    TriggerAddEventChatMessage(libDEBUG_gt_SpawnItemToUnitCommand, c_playerAny, "additem", false);
    TriggerAddEventChatMessage(libDEBUG_gt_SpawnItemToUnitCommand, c_playerAny, "adi", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Remove all items (actives) from selected units
//--------------------------------------------------------------------------------------------------

bool libDEBUG_gt_RemoveItemsFromUnit_Func(bool testConds, bool runActions) {

    unit lv_itUnit;
    unitgroup lv_unitgroup;
    int lv_unitcount;

    lv_unitgroup = UnitGroupSelected(EventPlayer());
    lv_unitcount = UnitGroupCount(lv_unitgroup, c_unitCountAll);
    for (;; lv_unitcount -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(lv_unitgroup, lv_unitcount);
        if (lv_itUnit == null) {
            break;
        }
        UnitInventoryRemove(UnitInventoryItem(lv_itUnit, 1));
        UnitInventoryRemove(UnitInventoryItem(lv_itUnit, 2));
        UnitInventoryRemove(UnitInventoryItem(lv_itUnit, 3));
        UnitInventoryRemove(UnitInventoryItem(lv_itUnit, 4));
        UnitInventoryRemove(UnitInventoryItem(lv_itUnit, 5));
        UnitInventoryRemove(UnitInventoryItem(lv_itUnit, 6));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Removed all items from " + UnitGetType(lv_itUnit)));
    }
    return true;
}

void libDEBUG_gt_RemoveItemsFromUnit_Init() {
    libDEBUG_gt_RemoveItemsFromUnit = TriggerCreate("libDEBUG_gt_RemoveItemsFromUnit_Func");
    TriggerEnable(libDEBUG_gt_RemoveItemsFromUnit, true);
    TriggerAddEventChatMessage(libDEBUG_gt_RemoveItemsFromUnit, c_playerAny, "rmi", true);
    TriggerAddEventChatMessage(libDEBUG_gt_RemoveItemsFromUnit, c_playerAny, "removeitems", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle Full Map vision
//--------------------------------------------------------------------------------------------------

bool libDEBUG_gt_ToggleFullMapVisionCommand_Func(bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }
    if (libDEBUG_gv_FogOfWarIsEnabled == true) {
        VisRevealerCreate(EventPlayer(), RegionEntireMap());
        libDEBUG_gv_FogOfWarRevealer = VisRevealerLastCreated();
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Fog Of War disabled"));
        libDEBUG_gv_FogOfWarIsEnabled = !libDEBUG_gv_FogOfWarIsEnabled;
    } else {
        VisRevealerDestroy(libDEBUG_gv_FogOfWarRevealer);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Fog Of War enabled"));
        libDEBUG_gv_FogOfWarIsEnabled = !libDEBUG_gv_FogOfWarIsEnabled;
    }
    return true;
}
void libDEBUG_gt_ToggleFullMapVisionCommand_Init() {
    libDEBUG_gt_ToggleFullMapVisionCommand = TriggerCreate("libDEBUG_gt_ToggleFullMapVisionCommand_Func");
    TriggerEnable(libDEBUG_gt_ToggleFullMapVisionCommand, true);
    TriggerAddEventChatMessage(libDEBUG_gt_ToggleFullMapVisionCommand, c_playerAny, "togglefogofwar", true);
    TriggerAddEventChatMessage(libDEBUG_gt_ToggleFullMapVisionCommand, c_playerAny, "tfow", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Force using backslash key (same with debug key) to force open the QA cheat menu without using chat command -devcheats
//--------------------------------------------------------------------------------------------------

bool libDEBUG_gt_ForceBackSlashKeyOpenQACheatCommand_Func(bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }

    if ((DialogControlIsVisible(libUIUI_gv_uIDebugPanel.lv_mainDialog, EventPlayer()) == true)) {
        DialogSetVisible(libSprt_gv_qACheatsControlsPanel.lv_mainDialog, PlayerGroupAll(), true);
    } else {
        DialogSetVisible(libSprt_gv_qACheatsControlsPanel.lv_mainDialog, PlayerGroupAll(), false);
    }

    return true;
}
void libDEBUG_gt_ForceBackSlashKeyOpenQACheatCommand_Init() {
    libDEBUG_gt_ForceBackSlashKeyOpenQACheatCommand = TriggerCreate("libDEBUG_gt_ForceBackSlashKeyOpenQACheatCommand_Func");
    TriggerEnable(libDEBUG_gt_ForceBackSlashKeyOpenQACheatCommand, true);
    TriggerAddEventKeyPressed(libDEBUG_gt_ForceBackSlashKeyOpenQACheatCommand, c_playerAny, c_keyBackSlash, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle builder mode
//--------------------------------------------------------------------------------------------------

bool libDEBUG_gt_ToggleBuilderModeCommand_Func(bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }
    if (libDEBUG_gv_BuilderModeIsEnabled) {
        // Already enabled, disable all triggers
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Builder Mode - Off"));
        libDEBUG_gv_BuilderModeIsEnabled = false;
        TriggerEnable(libDEBUG_gt_TeleportAllSelectedUnitsToMouseLocationCommand, false);

    } else {
        // Already disbled, enable all triggers
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Builder Mode - On"));
        libDEBUG_gv_BuilderModeIsEnabled = true;
        TriggerEnable(libDEBUG_gt_TeleportAllSelectedUnitsToMouseLocationCommand, true);

    }
    return true;
}

void libDEBUG_gt_ToggleBuilderModeCommand_Init() {
    libDEBUG_gt_ToggleBuilderModeCommand = TriggerCreate("libDEBUG_gt_ToggleBuilderModeCommand_Func");
    TriggerEnable(libDEBUG_gt_ToggleBuilderModeCommand, true);
    TriggerAddEventKeyPressed(libDEBUG_gt_ToggleBuilderModeCommand, c_playerAny, c_keyBackSpace, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Constantly teleport all selected units to the mouse location
//--------------------------------------------------------------------------------------------------

bool libDEBUG_gt_TeleportAllSelectedUnitsToMouseLocationCommand_Func(bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unit_i;
    point lv_mouse;

    // Automatic Variable Declarations
    int autoB2EDC8BC_ae;
    const int autoB2EDC8BC_ai = 1;

    // Variable Initialization
    lv_mouse = Point(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld());

    // Actions
    if (!runActions) {
        return true;
    }

    autoB2EDC8BC_ae = UnitGroupCount(UnitGroupSelected(EventPlayer()), c_unitCountAlive);
    lv_unit_i = 1;
    for (;
        ((autoB2EDC8BC_ai >= 0 && lv_unit_i <= autoB2EDC8BC_ae) || (autoB2EDC8BC_ai < 0 && lv_unit_i >= autoB2EDC8BC_ae)); lv_unit_i += autoB2EDC8BC_ai) {
        UnitSetPosition(UnitGroupUnit(UnitGroupSelected(EventPlayer()), lv_unit_i), lv_mouse, true);
    }
    return true;
}

void libDEBUG_gt_TeleportAllSelectedUnitsToMouseLocationCommand_Init() {
    libDEBUG_gt_TeleportAllSelectedUnitsToMouseLocationCommand = TriggerCreate("libDEBUG_gt_TeleportAllSelectedUnitsToMouseLocationCommand_Func");
    TriggerEnable(libDEBUG_gt_TeleportAllSelectedUnitsToMouseLocationCommand, false);
    TriggerAddEventMouseMoved(libDEBUG_gt_TeleportAllSelectedUnitsToMouseLocationCommand, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Output the unit ID by right clicking the unit
//--------------------------------------------------------------------------------------------------

bool libDEBUG_gt_OutputUnitIDCommand_Func(bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unittype;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto905AD777_g;
    int auto905AD777_u;

    // Actions
    if (!runActions) {
        return true;
    }

    auto905AD777_g = UnitGroupSelected(EventPlayer());
    auto905AD777_u = 1;
    for (; auto905AD777_u <= UnitGroupCount(auto905AD777_g, c_unitCountAll); auto905AD777_u += BoolToInt(lv_unit == UnitGroupUnit(auto905AD777_g, auto905AD777_u))) {
        lv_unit = UnitGroupUnit(auto905AD777_g, auto905AD777_u);
        lv_unittype = UnitGetType(lv_unit);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText(lv_unittype));
    }

    return true;

}

void libDEBUG_gt_OutputUnitIDCommand_Init() {
    libDEBUG_gt_OutputUnitIDCommand = TriggerCreate("libDEBUG_gt_OutputUnitIDCommand_Func");
    TriggerEnable(libDEBUG_gt_OutputUnitIDCommand, false);
    TriggerAddEventMouseClicked(libDEBUG_gt_OutputUnitIDCommand, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle output unit's ID mode with right click
//--------------------------------------------------------------------------------------------------

bool libDEBUG_gt_ToggleOutputUnitIDMode_Func(bool testConds, bool runActions) {

    if (!runActions) {
        return true;
    }
    if (libDEBUG_gv_OutputUnitIDModeIsEnabled) {
        TriggerEnable(libDEBUG_gt_OutputUnitIDCommand, false);
        libDEBUG_gv_OutputUnitIDModeIsEnabled = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Disabled Output Unit ID Mode"));
    } else {
        TriggerEnable(libDEBUG_gt_OutputUnitIDCommand, true);
        libDEBUG_gv_OutputUnitIDModeIsEnabled = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Enabled Output Unit ID Mode"));
    }

    return true;
}

void libDEBUG_gt_ToggleOutputUnitIDMode_Init() {
    libDEBUG_gt_ToggleOutputUnitIDMode = TriggerCreate("libDEBUG_gt_ToggleOutputUnitIDMode_Func");
    TriggerEnable(libDEBUG_gt_ToggleOutputUnitIDMode, true);
    TriggerAddEventChatMessage(libDEBUG_gt_ToggleOutputUnitIDMode, c_playerAny, "toi", true);
    TriggerAddEventChatMessage(libDEBUG_gt_ToggleOutputUnitIDMode, c_playerAny, "toggleoutputid", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Modify Score board (Tab Screen)
//--------------------------------------------------------------------------------------------------

bool libDEBUG_gt_ScoreModifier_Func(bool testConds, bool runActions) {

    string lv_field = StringWord(EventChatMessage(false), 2);
    string lv_value = StringWord(EventChatMessage(false), 3);
    int lv_valueParsed = StringToInt(lv_value);

    // Check the first param (command itself does it match, as "summary" can trigger "sum" command.) 
    if (!(((StringWord(EventChatMessage(false), 1) == "score") || (StringWord(EventChatMessage(false), 1) == "setscore")))) {
        return false;
    }

    if (lv_field == null || lv_value == null) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Command for modify score: setscore | score FIELD SCORE"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Example: setscore HeroDamage 0"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Example: score SoloKill 524287"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("For more details, please refer to README file."));
        return true;
    }
    PlayerScoreValueSetFromInt(EventPlayer(), lv_field, lv_valueParsed);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Modified Player " + IntToString(EventPlayer()) + "'s " + lv_field + " to " + IntToString(lv_valueParsed)));
    return true;
}

void libDEBUG_gt_ScoreModifier_Init() {
    libDEBUG_gt_ScoreModifier = TriggerCreate("libDEBUG_gt_ScoreModifier_Func");
    TriggerEnable(libDEBUG_gt_ScoreModifier, true);
    TriggerAddEventChatMessage(libDEBUG_gt_ScoreModifier, c_playerAny, "setscore", false);
    TriggerAddEventChatMessage(libDEBUG_gt_ScoreModifier, c_playerAny, "score", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle Free Camera
//--------------------------------------------------------------------------------------------------

bool libDEBUG_gt_ToggleFreeCamera_Func(bool testConds, bool runActions) {

    if (libDEBUG_gv_ToggleFreeCameraIsEnabled) {
        // Enabled, going to disble
        libDEBUG_gv_ToggleFreeCameraIsEnabled = !libDEBUG_gv_ToggleFreeCameraIsEnabled;
        CameraApplyInfo(EventPlayer(), CameraInfoDefault(), 0.0, -1, 10.0, false);
        CameraSetMouseRotates(EventPlayer(), false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringToText("Free Camera Mode - Off")));

    } else {
        // Disabled, going to enable
        libDEBUG_gv_ToggleFreeCameraIsEnabled = !libDEBUG_gv_ToggleFreeCameraIsEnabled;
        CameraSetMouseRotates(EventPlayer(), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringToText("Free Camera Mode - On")));

    }
    return true;
}

void libDEBUG_gt_ToggleFreeCamera_Init() {
    libDEBUG_gt_ToggleFreeCamera = TriggerCreate("libDEBUG_gt_ToggleFreeCamera_Func");
    TriggerEnable(libDEBUG_gt_ToggleFreeCamera, true);
    TriggerAddEventChatMessage(libDEBUG_gt_ToggleFreeCamera, c_playerAny, "tfc", true);
    TriggerAddEventChatMessage(libDEBUG_gt_ToggleFreeCamera, c_playerAny, "togglefreecamera", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Easter Egg - Do A Barrel Roll!
//--------------------------------------------------------------------------------------------------

bool libDEBUG_gt_EasterEggDoABarrelRoll_Func(bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto2CAE9C9B_ae = 90;
    const int auto2CAE9C9B_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("~~ Barrel Roll, Barrel Roll ~~"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("~~ Do The Barrel Barrel Roll ~~"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("~~ Do The Barrel Barrel Roll ~~"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("~~ Do The Barrel Roll ~~"));

    lv_i = 1;
    for (;
        ((auto2CAE9C9B_ai >= 0 && lv_i <= auto2CAE9C9B_ae) || (auto2CAE9C9B_ai < 0 && lv_i >= auto2CAE9C9B_ae)); lv_i += auto2CAE9C9B_ai) {
        CameraSetValue(1, c_cameraValueRoll, (lv_i * 4), 0.0625, -1, 100.0);
        Wait(0.000001, c_timeReal);
    }
    return true;
}

void libDEBUG_gt_EasterEggDoABarrelRoll_Init() {
    libDEBUG_gt_EasterEggDoABarrelRoll = TriggerCreate("libDEBUG_gt_EasterEggDoABarrelRoll_Func");
    TriggerEnable(libDEBUG_gt_EasterEggDoABarrelRoll, true);
    TriggerAddEventChatMessage(libDEBUG_gt_EasterEggDoABarrelRoll, c_playerAny, "do a barrel roll", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overrides the respawn point for player's unit
//--------------------------------------------------------------------------------------------------

bool libDEBUG_gt_OverrideRespawnPointCommand_Func(bool testConds, bool runActions) {

    int lv_i = 1;
    string lv_inputparam = StringWord(EventChatMessage(false), 2);
    string lv_inputparam2 = StringWord(EventChatMessage(false), 3);
    int lv_player = EventPlayer();
    point lv_cameraLocation = CameraGetTarget(EventPlayer());
    string lv_cameraLocationString = libNtve_gf_ConvertPointToString(lv_cameraLocation);

    // Check the first param (command itself does it match, as "summary" can trigger "sum" command.) 
    if (!(((StringWord(EventChatMessage(false), 1) == "rsp") || (StringWord(EventChatMessage(false), 1) == "respawnpoint")))) {
        return false;
    }

    if (lv_inputparam == null) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Command of set respawn point: respawnpoint | rsp {\"set\"|\"reset\"} {Player|\"all\"}"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Examples: respawnpoint set all"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Examples: rsp set 1"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Examples: rsp reset all"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("For more details, please refer to README file."));
        return true;
    }

    if (lv_inputparam2 == null) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Command of set respawn point: respawnpoint | rsp {\"set\"|\"reset\"} {Player|\"all\"}"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Examples: respawnpoint set all"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Examples: rsp set 1"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Examples: rsp reset all"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("For more details, please refer to README file."));
        return true;
    }

    if (lv_inputparam == "set") {
        if (lv_inputparam2 == "all") {

            lv_i = 1;
            for (;
                ((1 >= 0 && lv_i <= 10) || (1 <= 0 && lv_i >= 10)); lv_i += 1) {
                libGame_gv_players[lv_i].lv_spawnPoint = lv_cameraLocation;
            }
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Set All Players Respawn point to current camera point (" + lv_cameraLocationString + ")."));

        } else {
            if (StringToInt(lv_inputparam2) > 0) {
                lv_player = StringToInt(lv_inputparam2);
                libGame_gv_players[lv_player].lv_spawnPoint = lv_cameraLocation;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Set Player " + IntToString(lv_player) + "'s Respawn point to current camera point (" + lv_cameraLocationString + ")."));
            }
        }

    } else {

        if (lv_inputparam == "reset") {
            if (lv_inputparam2 == "all") {

                lv_i = 1;
                for (;
                    ((1 >= 0 && lv_i <= 10) || (1 <= 0 && lv_i >= 10)); lv_i += 1) {
                    libGame_gv_players[lv_i].lv_spawnPoint = PlayerStartLocation(lv_i);
                }
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Reset all Players Respawn point to their default spawn point."));
            } else {
                if (StringToInt(lv_inputparam2) > 0) {
                    lv_player = StringToInt(lv_inputparam2);
                    libGame_gv_players[lv_player].lv_spawnPoint = PlayerStartLocation(lv_player);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Reset Player " + IntToString(lv_player) + "'s Respawn point to default spawn point (" + libNtve_gf_ConvertPointToString(PlayerStartLocation(lv_player)) + ")"));

                }
            }

        } else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Command of set respawn point: respawnpoint | rsp {\"set\"|\"reset\"} {Player|\"all\"}"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Examples: respawnpoint set all"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Examples: rsp set 1"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Examples: rsp reset all"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("For more details, please refer to README file."));
        }
    }

    return true;
}

void libDEBUG_gt_OverrideRespawnPointCommand_Init() {
    libDEBUG_gt_OverrideRespawnPointCommand = TriggerCreate("libDEBUG_gt_OverrideRespawnPointCommand_Func");
    TriggerEnable(libDEBUG_gt_OverrideRespawnPointCommand, true);
    TriggerAddEventChatMessage(libDEBUG_gt_OverrideRespawnPointCommand, c_playerAny, "rsp", false);
    TriggerAddEventChatMessage(libDEBUG_gt_OverrideRespawnPointCommand, c_playerAny, "respawnpoint", false);
}

    //--------------------------------------------------------------------------------------------------
    // Trigger: DEBUG - Greetings are polite and important.
    //--------------------------------------------------------------------------------------------------

    bool libDEBUG_gt_GreetingsModeCommand_Func(bool testConds, bool runActions) {

        if (!runActions) {
            return true;
        }

        libDEBUG_gv_GreetingsModeIsEnabled = !libDEBUG_gv_GreetingsModeIsEnabled;
        if(libDEBUG_gv_GreetingsModeIsEnabled){
            TriggerEnable(libDEBUG_gt_GreetingModeOutputWithMouse, true);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Greetings Mode - On"));

        } else{
            TriggerEnable(libDEBUG_gt_GreetingModeOutputWithMouse, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Greetings Mode - Off"));

        }

        return true;
    }

    void libDEBUG_gt_GreetingsModeCommand_Init() {
        libDEBUG_gt_GreetingsModeCommand = TriggerCreate("libDEBUG_gt_GreetingsModeCommand_Func");
        TriggerEnable(libDEBUG_gt_GreetingsModeCommand, true);
        TriggerAddEventChatMessage(libDEBUG_gt_GreetingsModeCommand, c_playerAny, "GreetingsMode", true);
    }

       //--------------------------------------------------------------------------------------------------
    // Trigger: DEBUG - Greetings, Greetings. Hello.
    //--------------------------------------------------------------------------------------------------

    bool libDEBUG_gt_GreetingModeOutputWithMouse_Func(bool testConds, bool runActions) {
        string lv_unitName = StringReplaceWord(UnitGetType(UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1)), "Hero", "", c_stringReplaceAll, c_stringCase);
        string[7] lv_greetings;
        lv_greetings[0] = "Hello";
        lv_greetings[1] = "Greetings";
        lv_greetings[2] = "Hi";
        lv_greetings[3] = "Hey";
        lv_greetings[4] = "Howdy";
        lv_greetings[5] = "Yo";
        lv_greetings[6] = "Hiya";
        TextTagCreate(StringToText(lv_greetings[RandomInt(0, 6)] + ", " + lv_unitName), RandomInt(16, 100), CameraGetTarget(EventPlayer()), 0.0, true, false, PlayerGroupAll());
        TextTagAttachToUnit(TextTagLastCreated(), UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1), 0.0);
        TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, ColorWithAlpha(RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0), RandomFixed(50.0, 100.0)));
        TextTagSetVelocity(TextTagLastCreated(), RandomFixed(1.0, 6.0), libNtve_gf_RandomAngle());
        Wait(RandomFixed(1.0, 5.0), c_timeGame);
        TextTagDestroy(TextTagLastCreated());
        return true;
    }

    void libDEBUG_gt_GreetingModeOutputWithMouse_Init() {
        libDEBUG_gt_GreetingModeOutputWithMouse = TriggerCreate("libDEBUG_gt_GreetingModeOutputWithMouse_Func");
        TriggerEnable(libDEBUG_gt_GreetingModeOutputWithMouse, false);
        TriggerAddEventMouseClicked(libDEBUG_gt_GreetingModeOutputWithMouse, c_playerAny, c_mouseButtonNone, true);

    }



// Init triggers

void libDEBUG_InitTriggers() {
    libDEBUG_gt_greetingCommand_Init();
    libDEBUG_gt_SpawnUnitCommand_Init();
    libDEBUG_gt_KillUnitCommand_Init();
    libDEBUG_gt_RestartGameCommand_Init();
    libDEBUG_gt_RespawnTimeCommand_Init();
    libDEBUG_gt_SpawnSetScaleCommand_Init();
    libDEBUG_gt_SpawnItemToUnitCommand_Init();
    libDEBUG_gt_RemoveItemsFromUnit_Init();
    libDEBUG_gt_ToggleFullMapVisionCommand_Init();
    libDEBUG_gt_ForceBackSlashKeyOpenQACheatCommand_Init();
    libDEBUG_gt_ToggleBuilderModeCommand_Init();
    libDEBUG_gt_TeleportAllSelectedUnitsToMouseLocationCommand_Init();
    libDEBUG_gt_OutputUnitIDCommand_Init();
    libDEBUG_gt_ToggleOutputUnitIDMode_Init();
    libDEBUG_gt_ScoreModifier_Init();
    libDEBUG_gt_ToggleFreeCamera_Init();
    libDEBUG_gt_EasterEggDoABarrelRoll_Init();
    libDEBUG_gt_OverrideRespawnPointCommand_Init();
    libDEBUG_gt_GreetingsModeCommand_Init();
    libDEBUG_gt_GreetingModeOutputWithMouse_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libDEBUG_InitLib_completed = false;

void libDEBUG_InitLib() {
    if (libDEBUG_InitLib_completed) {
        return;
    }
    libDEBUG_InitLib_completed = true;
    libDEBUG_InitLibraries();
    libDEBUG_InitVariables();
    libDEBUG_InitTriggers();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Debug Lib Initialized"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Lets start by saying 'hi', shall we?"));
}