include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library: Utilities
//--------------------------------------------------------------------------------------------------
// Validating: templates

// Variable Declarations
bool libUTIL_gv_isUIEnabled;
revealer libUTIL_gv_revealer;
bool libUTIL_gv_isFOWEnabled;
bool libUTIL_gv_isMassCDREnabled;
int libUTIL_gv_massCDRPlayer;

// Trigger Declarations
trigger libUTIL_gt_MapInit;
trigger libUTIL_gt_ClearTextMessage;
trigger libUTIL_gt_ToggleUI;
trigger libUTIL_gt_ToggleFOW;
trigger libUTIL_gt_ToggleMassCDR;
trigger libUTIL_gt_RunMassCDR;
trigger libUTIL_gt_ToggleDebugMode;
trigger libUTIL_gt_WinGame;
trigger libUTIL_gt_StartGame;
trigger libUTIL_gt_EndGame;
trigger libUTIL_gt_RestartGame;
trigger libUTIL_gt_SetCameraObject;
trigger libUTIL_gt_ResetCameraObject;
trigger libUTIL_gt_ForceRunTrigger;

// Library Initialization
void libUTIL_InitVariables ();

//--------------------------------------------------------------------------------------------------
// Library: Utilities
//--------------------------------------------------------------------------------------------------
// Validating: templates

// External Library Initialization
void libUTIL_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libUTIL_InitVariables_completed = false;

void libUTIL_InitVariables () {
    if (libUTIL_InitVariables_completed) {
        return;
    }

    libUTIL_InitVariables_completed = true;

    libUTIL_gv_isUIEnabled = true;
    libUTIL_gv_isFOWEnabled = true;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: MapInit
//--------------------------------------------------------------------------------------------------
bool libUTIL_gt_MapInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Utilities Lib Initialized"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTIL_gt_MapInit_Init () {
    libUTIL_gt_MapInit = TriggerCreate("libUTIL_gt_MapInit_Func");
    TriggerAddEventMapInit(libUTIL_gt_MapInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ClearTextMessage
//--------------------------------------------------------------------------------------------------
bool libUTIL_gt_ClearTextMessage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((StringWord(EventChatMessage(false), 1) == "cls") || (StringWord(EventChatMessage(false), 1) == "clear")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText(("All Messages will be cleared after " + (StringWord(EventChatMessage(false), 2) + " seconds."))));
        Wait(StringToFixed(StringWord(EventChatMessage(false), 2)), c_timeGame);
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTIL_gt_ClearTextMessage_Init () {
    libUTIL_gt_ClearTextMessage = TriggerCreate("libUTIL_gt_ClearTextMessage_Func");
    TriggerAddEventChatMessage(libUTIL_gt_ClearTextMessage, c_playerAny, "cls", false);
    TriggerAddEventChatMessage(libUTIL_gt_ClearTextMessage, c_playerAny, "clear", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ToggleUI
//--------------------------------------------------------------------------------------------------
bool libUTIL_gt_ToggleUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUTIL_gv_isUIEnabled = !(libUTIL_gv_isUIEnabled);
    if ((libUTIL_gv_isUIEnabled == true)) {
        libNtve_gf_HideGameUI(true, PlayerGroupAll());
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Turned on UI: All abilities will be enabled"));
    }
    else {
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Turned off UI: All abilities will be disabled"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTIL_gt_ToggleUI_Init () {
    libUTIL_gt_ToggleUI = TriggerCreate("libUTIL_gt_ToggleUI_Func");
    TriggerAddEventChatMessage(libUTIL_gt_ToggleUI, c_playerAny, "tui", true);
    TriggerAddEventChatMessage(libUTIL_gt_ToggleUI, c_playerAny, "toggleui", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ToggleFOW
//--------------------------------------------------------------------------------------------------
bool libUTIL_gt_ToggleFOW_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUTIL_gv_isFOWEnabled = !(libUTIL_gv_isFOWEnabled);
    if ((libUTIL_gv_isFOWEnabled == true)) {
        VisRevealerDestroy(libUTIL_gv_revealer);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Enabled Fog Of War"));
    }
    else {
        VisRevealerCreate(EventPlayer(), RegionEntireMap());
        libUTIL_gv_revealer = VisRevealerLastCreated();
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Disabled Fog Of War"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTIL_gt_ToggleFOW_Init () {
    libUTIL_gt_ToggleFOW = TriggerCreate("libUTIL_gt_ToggleFOW_Func");
    TriggerAddEventChatMessage(libUTIL_gt_ToggleFOW, c_playerAny, "tfow", true);
    TriggerAddEventChatMessage(libUTIL_gt_ToggleFOW, c_playerAny, "togglefogofwar", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ToggleMassCDR
//--------------------------------------------------------------------------------------------------
bool libUTIL_gt_ToggleMassCDR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUTIL_gv_isMassCDREnabled = !(libUTIL_gv_isMassCDREnabled);
    if ((libUTIL_gv_isMassCDREnabled == true)) {
        libUTIL_gv_massCDRPlayer = EventPlayer();
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Mass CDR Enabled"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Mass CDR Disabled"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTIL_gt_ToggleMassCDR_Init () {
    libUTIL_gt_ToggleMassCDR = TriggerCreate("libUTIL_gt_ToggleMassCDR_Func");
    TriggerAddEventChatMessage(libUTIL_gt_ToggleMassCDR, c_playerAny, "tcdr", true);
    TriggerAddEventChatMessage(libUTIL_gt_ToggleMassCDR, c_playerAny, "togglecdr", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RunMassCDR
//--------------------------------------------------------------------------------------------------
bool libUTIL_gt_RunMassCDR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_i;

    // Automatic Variable Declarations
    int autoF588521D_ae;
    const int autoF588521D_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libUTIL_gv_isMassCDREnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF588521D_ae = UnitGroupCount(UnitGroupSelected(libUTIL_gv_massCDRPlayer), c_unitCountAlive);
    lv_i = 1;
    for ( ; ( (autoF588521D_ai >= 0 && lv_i <= autoF588521D_ae) || (autoF588521D_ai < 0 && lv_i >= autoF588521D_ae) ) ; lv_i += autoF588521D_ai ) {
        lv_unit = UnitGroupUnit(UnitGroupSelected(libUTIL_gv_massCDRPlayer), lv_i);
        UnitSetPropertyFixed(lv_unit, c_unitPropEnergyPercent, 100.0);
        libSprt_gf_DEBUGRefreshCooldownsforUnit(libUTIL_gv_massCDRPlayer, lv_unit);
    }
    libGame_gf_HeroRefreshCooldowns(libUTIL_gv_massCDRPlayer, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTIL_gt_RunMassCDR_Init () {
    libUTIL_gt_RunMassCDR = TriggerCreate("libUTIL_gt_RunMassCDR_Func");
    TriggerAddEventTimePeriodic(libUTIL_gt_RunMassCDR, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ToggleDebugMode
//--------------------------------------------------------------------------------------------------
bool libUTIL_gt_ToggleDebugMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_debugModeProxyVariable;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_dEBUGDebuggingEnabled = !(libCore_gv_dEBUGDebuggingEnabled);
    lv_debugModeProxyVariable = libCore_gv_dEBUGDebuggingEnabled;
    if ((lv_debugModeProxyVariable == true)) {
        libUTIL_gv_massCDRPlayer = EventPlayer();
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Debug Mode Enabled"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Debug Mode Disabled"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTIL_gt_ToggleDebugMode_Init () {
    libUTIL_gt_ToggleDebugMode = TriggerCreate("libUTIL_gt_ToggleDebugMode_Func");
    TriggerAddEventChatMessage(libUTIL_gt_ToggleDebugMode, c_playerAny, "tdb", true);
    TriggerAddEventChatMessage(libUTIL_gt_ToggleDebugMode, c_playerAny, "toggledebugmode", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WinGame
//--------------------------------------------------------------------------------------------------
bool libUTIL_gt_WinGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((StringWord(EventChatMessage(false), 1) == "wg") || (StringWord(EventChatMessage(false), 1) == "wingame")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Usage: <wg|wingame> <TeamID>"));
    }
    else {
        lv_team = StringToInt(StringWord(EventChatMessage(false), 2));
        libGame_gf_GameOver(lv_team);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTIL_gt_WinGame_Init () {
    libUTIL_gt_WinGame = TriggerCreate("libUTIL_gt_WinGame_Func");
    TriggerAddEventChatMessage(libUTIL_gt_WinGame, c_playerAny, "wg", false);
    TriggerAddEventChatMessage(libUTIL_gt_WinGame, c_playerAny, "wingame", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StartGame
//--------------------------------------------------------------------------------------------------
bool libUTIL_gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Starting Game ..."));
    libSprt_gf_DEBUGStartGame();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTIL_gt_StartGame_Init () {
    libUTIL_gt_StartGame = TriggerCreate("libUTIL_gt_StartGame_Func");
    TriggerAddEventChatMessage(libUTIL_gt_StartGame, c_playerAny, "sg", true);
    TriggerAddEventChatMessage(libUTIL_gt_StartGame, c_playerAny, "startgame", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EndGame
//--------------------------------------------------------------------------------------------------
bool libUTIL_gt_EndGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Kicking All Players ..."));
    KickFromGame(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTIL_gt_EndGame_Init () {
    libUTIL_gt_EndGame = TriggerCreate("libUTIL_gt_EndGame_Func");
    TriggerAddEventChatMessage(libUTIL_gt_EndGame, c_playerAny, "eg", true);
    TriggerAddEventChatMessage(libUTIL_gt_EndGame, c_playerAny, "endgame", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RestartGame
//--------------------------------------------------------------------------------------------------
bool libUTIL_gt_RestartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Attempting to restart......."));
    RestartGame(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTIL_gt_RestartGame_Init () {
    libUTIL_gt_RestartGame = TriggerCreate("libUTIL_gt_RestartGame_Func");
    TriggerAddEventChatMessage(libUTIL_gt_RestartGame, c_playerAny, "re", true);
    TriggerAddEventChatMessage(libUTIL_gt_RestartGame, c_playerAny, "restartgame", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Camera Object
//--------------------------------------------------------------------------------------------------
bool libUTIL_gt_SetCameraObject_Func (bool testConds, bool runActions) {
    // Variable Declarations
    camerainfo lv_camera;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((StringWord(EventChatMessage(false), 1) == "sco") || (StringWord(EventChatMessage(false), 1) == "setcameraobject")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        CameraSetData(PlayerGroupSingle(EventPlayer()), (StringWord(EventChatMessage(false), 2)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText(("Set Camera Data to " + StringWord(EventChatMessage(false), 2))));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTIL_gt_SetCameraObject_Init () {
    libUTIL_gt_SetCameraObject = TriggerCreate("libUTIL_gt_SetCameraObject_Func");
    TriggerAddEventChatMessage(libUTIL_gt_SetCameraObject, c_playerAny, "sco", false);
    TriggerAddEventChatMessage(libUTIL_gt_SetCameraObject, c_playerAny, "setcameraobject", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Camera Object
//--------------------------------------------------------------------------------------------------
bool libUTIL_gt_ResetCameraObject_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const string lv_defaultCamera = "BlizzardAllStars";

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetData(PlayerGroupSingle(EventPlayer()), (lv_defaultCamera));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText(("Reset Camera Data to " + lv_defaultCamera)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTIL_gt_ResetCameraObject_Init () {
    libUTIL_gt_ResetCameraObject = TriggerCreate("libUTIL_gt_ResetCameraObject_Func");
    TriggerAddEventChatMessage(libUTIL_gt_ResetCameraObject, c_playerAny, "rco", true);
    TriggerAddEventChatMessage(libUTIL_gt_ResetCameraObject, c_playerAny, "resetcameraobject", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Run Trigger
//--------------------------------------------------------------------------------------------------
bool libUTIL_gt_ForceRunTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_triggerName;
    trigger lv_trigger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggerName = "";

    // Conditions
    if (testConds) {
        if (!(((StringWord(EventChatMessage(false), 1) == "frt") || (StringWord(EventChatMessage(false), 1) == "forceruntrigger")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Usage: <frt|forceruntrigger> <TriggerID>"));
    }
    else {
        lv_triggerName = StringWord(EventChatMessage(false), 2);
        lv_trigger = TriggerCreate(lv_triggerName);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText(("Started Trigger: " + StringWord(EventChatMessage(false), 2))));
        TriggerExecute(lv_trigger, false, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText(("Stopped Trigger: " + StringWord(EventChatMessage(false), 2))));
        TriggerDestroy(lv_trigger);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTIL_gt_ForceRunTrigger_Init () {
    libUTIL_gt_ForceRunTrigger = TriggerCreate("libUTIL_gt_ForceRunTrigger_Func");
    TriggerAddEventChatMessage(libUTIL_gt_ForceRunTrigger, c_playerAny, "frt", false);
    TriggerAddEventChatMessage(libUTIL_gt_ForceRunTrigger, c_playerAny, "forceruntrigger", false);
}

void libUTIL_InitTriggers () {
    libUTIL_gt_MapInit_Init();
    libUTIL_gt_ClearTextMessage_Init();
    libUTIL_gt_ToggleUI_Init();
    libUTIL_gt_ToggleFOW_Init();
    libUTIL_gt_ToggleMassCDR_Init();
    libUTIL_gt_RunMassCDR_Init();
    libUTIL_gt_ToggleDebugMode_Init();
    libUTIL_gt_WinGame_Init();
    libUTIL_gt_StartGame_Init();
    libUTIL_gt_EndGame_Init();
    libUTIL_gt_RestartGame_Init();
    libUTIL_gt_SetCameraObject_Init();
    libUTIL_gt_ResetCameraObject_Init();
    libUTIL_gt_ForceRunTrigger_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libUTIL_InitLib_completed = false;

void libUTIL_InitLib () {
    if (libUTIL_InitLib_completed) {
        return;
    }

    libUTIL_InitLib_completed = true;

    libUTIL_InitLibraries();
    libUTIL_InitVariables();
    libUTIL_InitTriggers();
}

